// const handleStripeWebhookService = async (event: Stripe.Event) => {
//   switch (event.type) {
//     case 'checkout.session.completed': {
//       const session = event.data.object as Stripe.Checkout.Session;

//       const { amount_total, metadata, payment_intent, status } = session;
//       const userId = metadata?.userId as string;
//       const planId = metadata?.planId as string;
//       const products = JSON.parse(metadata?.products || '[]');
//       const email = session.customer_email || '';

//       const amountTotal = (amount_total ?? 0) / 100;

//       const subscription = await stripe.subscriptions.retrieve(
//         session.subscription as string
//       );

//       const startDate = new Date(subscription.start_date * 1000);
//       const endDate = new Date(subscription.current_period_end * 1000);

//       const paymentRecord = new Subscribtion({
//         amount: amountTotal,
//         user: new Types.ObjectId(userId),
//         plan: new Types.ObjectId(planId),
//         products,
//         email,
//         transactionId: payment_intent,
//         startDate,
//         endDate,
//         status: 'Pending',
//         subscriptionId: session.subscription,
//         stripeCustomerId: session.customer as string,
//       });

//       await paymentRecord.save();
//       break;
//     }

//     case 'invoice.payment_succeeded': {
//       const invoice = event.data.object as Stripe.Invoice;
//       const subscription = await Subscribtion.findOne({
//         subscriptionId: invoice.subscription,
//       });

//       if (subscription) {
//         subscription.status = 'active';
//         await subscription.save();
//       }

//       const isUser = await User.findById(subscription?.user);

//       await User.findByIdAndUpdate(isUser?._id, {
//         $set: {
//           subscription: true,
//         },
//       });

//       break;
//     }

//     case 'invoice.payment_failed': {
//       const invoice = event.data.object as Stripe.Invoice;

//       // Find the subscription in your database
//       const subscription = await Subscribtion.findOne({
//         subscriptionId: invoice.subscription,
//       });

//       if (subscription) {
//         subscription.status = 'expired'; // Update status to expired
//         await subscription.save();
//       }

//       const user = await User.findById(subscription?.user);

//       if (user) {
//         await User.findByIdAndUpdate(user._id, {
//           $set: {
//             subscription: false, // Update user subscription status
//           },
//         });
//       }

//       break;
//     }

//     case 'checkout.session.async_payment_failed': {
//       const session = event.data.object as Stripe.Checkout.Session;
//       const payment = await Subscribtion.findOne({
//         stripeCustomerId: session.customer as string,
//       });
//       if (payment) {
//         payment.status = 'Failed';
//         await payment.save();
//       }
//       break;
//     }

//     case 'customer.subscription.deleted': {
//       const subscription = event.data.object as Stripe.Subscription;

//       // Find the subscription record in your database
//       const existingSubscription = await Subscribtion.findOne({
//         subscriptionId: subscription.id,
//       });

//       if (existingSubscription) {
//         existingSubscription.status = 'expired'; // Mark as expired
//         await existingSubscription.save();

//         // Update the user's subscription status to false
//         const user = await User.findById(existingSubscription.user);

//         if (user) {
//           await User.findByIdAndUpdate(user._id, {
//             $set: { subscription: false },
//           });
//         }
//       }

//       break;
//     }

//     default:
//       throw new ApiError(StatusCodes.BAD_REQUEST, 'Invalid event type');
//   }
// };
